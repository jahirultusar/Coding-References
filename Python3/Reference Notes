

""" This is a basic Python3 reference guide. Shout out to TechWithTim from youtube. Massive fan """
  """ To keep it simple python is divided under four categories (Basic, Intermediate, Advanced & Expert) and referenced below """
  
                                            
                                            
#################### Basic ####################

  # Variables:---------------------------------------------------------------------------------------------------------------------------------------------
      > Variables are containers for storing data values. A variable is created the moment you first assign a value to it.
        for example x = 1 here x is a variable
      
      > Rules for Python variables:
        * A variable name must start with a letter or the underscore character
        * A variable name cannot start with a number
        * A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
        * Variable names are case-sensitive (age, Age and AGE are three different variables)
        
      > Python allows us to assign values to multiple variables in one line: x, y, z = "Orange", "Banana", "Cherry"
        And we can assign the same value to multiple variables in one line: x = y = z = "Orange"
      
      > If you have a collection of values in a list, tuple etc. Python allows you to extract the values into variables. 
         This is called unpacking. such as: 
                                            fruits = ["apple", "banana", "cherry"]
                                            x, y, z = fruits //list unpacked here
      
      > We can not concatenate (or add) two data types. It's an TypeError
      
      > Variables that are created outside of a function are known as global variables.
      
      > To change the value of a global variable inside a function, refer to the variable by using the global keyword:
                                             x = "awesome"

                                             def myfunc():
                                               global x //changes x's value
                                               x = "fantastic"

                                             myfunc()
    

  # Data Types:---------------------------------------------------------------------------------------------------------------------------------------------
      > Python has the following data types built-in by default, in these categories:

                  * Text Type:	    str // "String" 'string'
                  * Numeric Types:	int, float, complex // 1, 1.1, 1A
                  * Sequence Types:	list, tuple, range // [], (), range()
                  * Mapping Type:	  dict // {"key": Value}
                  * Set Types:	    set, frozenset // x = {"apple", "banana", "cherry"} --> not key value pair
                  * Boolean Type:	  bool // True False
                  * Binary Types:	  bytes, bytearray, memoryview // b"Hello", bytearray(5), memoryview(bytes(5))
                  * None Type:	    NoneType //none

                  > to get the data type of any object by using the type() function: print(type())

  # Conditions:
  # Chained Conditions
  # Operators
  # Control Flow
  # Loops and Iterables
  # Basic Data Structures
  # Functions:
      > A function is a block of code which only runs when it is called.
      > Parameters or Arguments: 
                                Parameter is the variable listed inside the parentheses in the function definition.
                                Argument is the value that is sent to the function when it is called.
                                
      > *args: Arbitrary Arguments --> def functions(*args) //This way the function will receive a tuple of arguments 
      > **kwargs: Arbitrary Keyword Arguments --> def functions(**kwargs) // This way the function will receive a dictionary of arguments  
      
  # Mutable vs Immutable: ---------------------------------------------------------------------------------------------------------------------------------
      
      ##### list[] #####   
      
      > List is a collection which is ordered and changeable. Allows duplicate members.
          
           --> list methods link: https://www.w3schools.com/python/python_lists_methods.asp
                    
                    
      ##### tuple() #####      
      
      > Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
          *Note: When creating a tuple with only one item, remember to include a comma after the item, otherwise it will not be identified as a tuple.
          *Note: You cannot remove items in a tuple.
          
          --> tuple methods link: https://www.w3schools.com/python/python_tuples_methods.asp
          
          
        ##### set() #####          
        
      > Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
          *Set items are unchangeable, but you can remove and/or add items whenever you like.
          *Sets cannot have two items with the same value.
          *Set items can be of any data type:
                        --> set1 = {"apple", "banana", "cherry"}
                        --> set2 = {1, 5, 7, 9, 3}
                        --> set3 = {True, False, False}
          *A set can contain different data types: set1 = {"abc", 34, True, 40, "male"}
          *Using the set() constructor to make a set: thisset = set(("apple", "banana", "cherry")) // note the double round-brackets
          *Note: Sets are unordered, so you cannot be sure in which order the items will appear.
          *Note: Do not use pop() methods as set() is unordered. use discard()//doesn't show error or remove()// will raise an error if item doesn't exist
          
          --> set methods link: https://www.w3schools.com/python/python_sets_methods.asp
          
                   
      ##### dict{"key": value} #####   
      
      > Dictionary is a collection which is ordered** and changeable. No duplicate members.
      > Dictionaries are used to store data values in key:value pairs.
      > The values in dictionary items can be of any data type
      > You can access the items of a dictionary by referring to its key name, inside square brackets:
          // There is also a method called get() that will give you the same result:
      > The keys() method will return a list of all the keys in the dictionary.
      > The values() method will return a list of all the values in the dictionary.
      > The items() method will return each item in a dictionary, as tuples in a list.
      > The update() method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.
          // The argument must be a dictionary, or an iterable object with key:value pairs.
      > A dictionary can contain dictionaries, this is called nested dictionaries.{{}}
      
      --> dictionary methods link: https://www.w3schools.com/python/python_dictionaries_methods.asp
      
          ***As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered***
 -----------------------------------------------------------------------------------------------------------------------------------------------------------     
  # Common Methods
  # File IO
  

#################### Intermediate ####################

  # Comprehension
  # Lambda Functions
  # Collectios Module
  # Map & Filter
  # *args **kwargs
  #Inheritance
  # Advanced class
  # Behaviour
  # PiP
  # Environment (venv)
  # Async IO
  

#################### Advanced ####################

  # Decorators
  # Generators
  # Context Managers
  # Metaclasses
  # Concurrency 
  # Parallelism
  # Testing
  # Pacakages
  # Cython ---> :(
  

#################### Expert ####################

  # 
  #
  #
  
  
