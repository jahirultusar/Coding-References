<!--this reference textfile is based on Corey Schafer tutorial as a reference guide. he is awesome--> 

After creating a virtual environment..
    # Install pandas: pip install pandas
    # to use jupyter notebook: pip install jupyterlab 
    

once setup is done open desired csv file from working directory start jupyter notebook server by command
    # jupyter notebook  // Note: if kernel error happens in jupyter fix it by jupyter notebook reference 
    
in jupyter open a new notebook. then
    # import pandas as pd
      
to order to open our csv
     # df = pd.read_csv('file_name.csv') 
            **// Note: df is dataframe. basically dataframe are the rows and columns of data! pd.read_csv is for pandas reading csv and the pass csv filename in parenthesis in quotation mark
                **// Series is the rows of a single column 
                    **// DataFrame is 2d, Series is 1D

to find out how many rows and columns:
    # df.shape // output will be (number of rows, number of columns)
    or
    # df.info() // output will be more defined
    
***to see all the columns change the setting via pandas
    # pd.set_option('display.max_columns', number_of_colimns_we_want_to_see)

        to see all the rows change the setting via pandas
                    # pd.set_option('display.max_rows', number_of_colimns_we_want_to_see)
                 
                 to see the first five rows:
                        # df.head()
                            or df.head(10) //to see first ten rows
                            
                            to see last ten rows:
                                # df.tail(10)
                                
 *** to create a dataframe from a dictionary{}
        # df = pd.DataFrame() // pass the dictionary name in parenthrsis
        
             to access dataframe as a list:
                # df[] //for single column or a series
                    # df[[]] // for multiple columns
                    
 *** to get columns as a list
        # df.columns
        
            to get rows as list with loc or iloc
                # df.iloc[] or df.iloc[[]] // will find the location of rows via indes. for example df.iloc[0] to find first row or df.iloc[[0, 1]] for multiple rows
                    // df.iloc cannot take column or secound argument as string. df.iloc[[0, 1], only_index_number]
                    // df.loc only can take column or second argument as string. df.loc[[o, 1], only_string]
                    
                    
                                                      ***Note***
                *** loc or iloc slicing do not nest them in brackets. df.loc[0:2, 'column_name]
                *** pandas slicing is upto includes. for example df.loc[0:2] will include :2 unlike python
                
    
    
    <!-- Indexes-->
    
    to set a new index or change it from default: //be careful to change it from deafulte
        # df.set_index('column_name')
            ** // we can still find the columns using df.iloc[] method  
    
   **to reset index:
        # df.reset_index(inplace=True)

    to sort the index alphabetically:
            # df.sort_index() // ascending sort

                to sort in reverse order
                    # df.sort_index(ascending=False)

                    to sort index permanently
                        # df.sort_index(inplace=True)



    <!-- Filtering Data-->
    
    to filter out data 
    
    
    <!-- Alter Data-->
    
   // for example change column spacce with '_'
        # df.columns = df.columns.str.replace(' ', '_')
        
    // for exmple change columns in lower case
         # df.columns = [x.lower() for x in df.columns]
         
     // to change name of columns
           # df.rename(columns={'column_name': 'to_rename'})
           
           
     some methods to filter data..
     
            .apply //to grrab some information from data and apply changes to data
    
    
    <!-- Grouping and Aggregating Data-->
    
    // 
    # df.groupby()
    

